grcf amzq wfhu jykn


# @authentication_bp.post('/register')
# def register():
#     raw_data= request.get_json()
#     try:
#         validation_data= ShopSchema(shopName=raw_data['shop_name'],
#                               email=raw_data['email'],
#                               password=raw_data['password'])
#     except ValidationError as e:
#         return jsonify({'create shop account entry error':str(e)})
    
#     test_email= Shop.query.filter_by(email=validation_data.email).first()
#     if test_email is not None and  test_email.isVerified is True:
#         return jsonify({"msg":"Email already exists"})
#     else:

#         #temporarily push to the database
#         shop=Shop(shopName=validation_data.shopName,
#                   email=validation_data.email,
#                   password=generate_password_hash(validation_data.password))
#         db.session.add(shop)
#         db.session.commit()

#         # send email confirmation token
#         token=create_token(validation_data.email)
#         send_email(validation_data.email,token)
#         return jsonify({'msg':'confirmation email sent'})


# @authentication_bp.post('/confirm')
# def confirm():
#         token= request.get_json()
#         try:
#             email=confirm_token(token)
#         except:
#             return jsonify({'msg':'Token has expired'})
#         shop = Shop.query.filter_by(email=email).first()
#         #shop_final=Shop(shopName=validation_data.shopName,email=validation_data.email,password=validation_data.password)
#         shop.isVerified=True
#         db.session.commit()
#         return jsonify({'msg':'confirmation success'})


@authentication_bp.post('/register')
def create_shop_account():
    raw_data = request.get_json()
    try:
        validation_data = ShopSchema(
            shopName=raw_data['shop_name'],
            email=raw_data['email'],
            password=raw_data['password']
        )
    except ValidationError as e:
        return jsonify({'create shop account entry error': str(e)}), 400

    user = Shop.query.filter_by(email=validation_data.email).first()
    if user:
        return jsonify({'msg': 'User already exists'}), 409

    shop = Shop(
        shopName=validation_data.shopName,
        email=validation_data.email,
        password=generate_password_hash(validation_data.password)
    )
    manager_password = "123456"
    manager = Manager(password=generate_password_hash(manager_password))
    db.session.add_all([shop, manager])
    db.session.commit()
    return jsonify({
        'msg': 'Shop account successfully created. Your temporary manager pass key is {manager_password}. You are advised to set a stronger one in the settings option.'
    }), 201


@authentication_bp.post('/register')
def register():
    raw_data= request.get_json()
    try:
       validation_data = ShopSchema(
           shopName=raw_data['shop_name'],
           number=raw_data['number'],
           password=raw_data['password']
       )
            
    
    except ValidationError as e:
        return jsonify({'create shop account entry error':str(e)})
    
    test_number= Shop.query.filter_by(number=validation_data.number).first()
    if test_number is not None and  test_number.is_verified is True:
        return jsonify({"msg":"Number already taken use a different"})
    else:

        #temporarily push to the database
        shop=Shop(name=validation_data.shopName,
                  number=validation_data.number,
                  password=generate_password_hash(validation_data.password))
        db.session.add(shop)
        db.session.commit()

        # send otp
        otp=generate_otp()
        client = requests.Session()
        url = "https://sms.arkesel.com/sms/api"
        params = {
        "action": "send-sms",
        "api_key": 'V1dSaWhlbWFsb3BVc0lISHZZc1A',
        "to": validation_data.number,
        "from": "SaleSmart",
        "sms": f"SaleSmart Business Manager OTP is {otp}"
        }
        try:
            response = client.get(url, params=params)
            response.raise_for_status()
            response_data=response.json()
            return jsonify ({'msg':"successfully sent",
                             "otp":otp,
                             'response':response_data
                             })
            
        except requests.exceptions.RequestException as e:
            db.session.delete(shop)  # Rollback shop creation if OTP sending fails
            db.session.commit()
            return jsonify({"error": "Error occurred while sending OTP", "details": str(e)}), 500
            
            



@authentication_bp.post('/confirm')
def confirm():
        otp=request.get_json()
        otp_data=otp['otp']
        
        status=verify_otp(int(otp_data))
        print(otp_data)
        print (status)
        if status:
            return jsonify({'msg':'Shop account succesfully created'})
        else:
            return jsonify({'msg':'Invalid OTP entered'})


in the  register confirm endpoint i want to set is_verified to True for the current shop after the otp verification is sucessful how do i do that